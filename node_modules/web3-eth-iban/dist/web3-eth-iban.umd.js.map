{"version":3,"file":"web3-eth-iban.umd.js","sources":["../src/Iban.js","../src/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\n'use strict';\n\nimport * as Utils from 'web3-utils';\nimport BigNumber from 'bn.js';\n\nconst leftPad = (string, bytes) => {\n    let result = string;\n    while (result.length < bytes * 2) {\n        result = `0${result}`;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = (iban) => {\n    const A = 'A'.charCodeAt(0);\n    const Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0, 4);\n\n    return iban\n        .split('')\n        .map((n) => {\n            const code = n.charCodeAt(0);\n            if (code >= A && code <= Z) {\n                // A = 10, B = 11, ... Z = 35\n                return code - A + 10;\n            } else {\n                return n;\n            }\n        })\n        .join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = (iban) => {\n    let remainder = iban;\n\n    let block;\n\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\nexport default class Iban {\n    /**\n     * @param {String} iban\n     *\n     * @constructor\n     */\n    constructor(iban) {\n        this._iban = iban;\n    }\n\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     *\n     * @param {String} ib\n     *\n     * @returns {String}\n     */\n    static toAddress(ib) {\n        ib = new Iban(ib);\n\n        if (!ib.isDirect()) {\n            throw new Error(\"IBAN is indirect and can't be converted\");\n        }\n\n        return ib.toAddress();\n    }\n\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     *\n     * @param {String} address\n     *\n     * @returns {String} the IBAN address\n     */\n    static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     *\n     * @param {String} address\n     *\n     * @returns {Iban} the IBAN object\n     */\n    static fromAddress(address) {\n        if (!Utils.isAddress(address)) {\n            throw new Error(`Provided address is not a valid address: ${address}`);\n        }\n\n        address = address.replace('0x', '').replace('0X', '');\n\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     *\n     * @param {String} bban the BBAN to convert to IBAN\n     *\n     * @returns {Iban} the IBAN object\n     */\n    static fromBban(bban) {\n        const countryCode = 'XE';\n\n        const remainder = mod9710(iso13616Prepare(`${countryCode}00${bban}`));\n        const checkDigit = `0${98 - remainder}`.slice(-2);\n\n        return new Iban(countryCode + checkDigit + bban);\n    }\n\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     *\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     *\n     * @returns {Iban} the IBAN object\n     */\n    static createIndirect(options) {\n        return Iban.fromBban(`ETH${options.institution}${options.identifier}`);\n    }\n\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     *\n     * @param {String} iban string\n     *\n     * @returns {Boolean} true if it is valid IBAN\n     */\n    static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     *\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isValid() {\n        return (\n            /^XE\\d{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1\n        );\n    }\n\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     *\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     *\n     * @returns {Boolean} true if it is, otherwise false\n     */\n    isIndirect() {\n        return this._iban.length === 20;\n    }\n\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     *\n     * @returns {String} checksum\n     */\n    checksum() {\n        return this._iban.substr(2, 2);\n    }\n\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     *\n     * @returns {String} institution identifier\n     */\n    institution() {\n        return this.isIndirect() ? this._iban.substr(7, 4) : '';\n    }\n\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     *\n     * @returns {String} client identifier\n     */\n    client() {\n        return this.isIndirect() ? this._iban.substr(11) : '';\n    }\n\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     *\n     * @returns {String} ethereum address\n     */\n    toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.substr(4);\n            const asBn = new BigNumber(base36, 36);\n            return Utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n\n        return '';\n    }\n\n    toString() {\n        return this._iban;\n    }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\nexport Iban from './Iban.js';\n"],"names":["leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","constructor","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","Utils","replace","asBn","BigNumber","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","test","isIndirect","checksum","client"],"mappings":"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"}